library(tidyverse)
library(broom)
library(stringr)
library(magrittr)
library(purrr)
library(data.table)

# compare with stargazer
library(stargazer)

# regression packages
library(lfe)
library(rdrobust)

rm(list = ls())

# create dummy data for linear regression
# use mtcars

reg1 <-
  mtcars %>%
  lm(data = ., mpg ~ wt)

reg2 <-
  mtcars %>%
  lm(data = ., mpg ~ hp)

reg3 <-
  mtcars %>%
  filter(gear == 4) %>%
  lm(data = ., mpg ~ am)

reg4 <-
  mtcars %>%
  lm(data = ., mpg ~ wt + hp + am + as.factor(cyl))

reg5 <-
  mtcars %>%
  lm(data = ., wt ~ hp)

reg6 <-
  mtcars %>%
  lm(data = ., wt ~ hp + as.factor(cyl))

# input

# function will take regressions as a list of list objects
regs <- list(reg1, reg2, reg3, reg4, reg5, reg6)

# one optional parameter will be a tibble with variables and labels
var_labels <- tibble(term = c("wt", "hp"),
                     label = c("Weight", "Horsepower"))

# which variables to omit?
var_omits <- c("(Intercept)")

# which variables to indicate yes no
# so they aren't omitted but the coefficients aren't there
var_indicates <- tibble(term = c("am", "cyl"), indicator = c("Transmission FE", "Cylinders FE"))
# var_indicates <- NULL

# which summary stats to include?
sumstat_include <- c("N", "aR2", "Ymean")

source("R/lookups.R")

# we're going to extract some things right from regs
# but other things from the list of summaries
regs_summary <- map(regs, summary)

# simple stuff
# all with the prefix regs_

# count the number of regressions
# for numbering columns
reg_columns <- length(regs)

# get the functions called to run regressions
# useful metadata
# TODO add this to output
reg_calls <- map(regs, extract2, c("call")) %>%
  as.character()

# summary statistics
source("R/sumstat.R")
out_sumstats <- sumstat_master(regs, sumstat_include, sumstat_names)

source("R/coeffs.R")
out_x_fe <- x_fe_master(regs, var_labels, var_indicates, var_omits)

out_colnumbers <- 1:reg_columns %>%
  # surround with \multicolumn{1}{c}{XXX}
  sprintf("\\multicolumn{1}{c}{(%s)}", .) %>%
  map(extract) %>%
  purrr::transpose() %>%
  map_chr(paste0, collapse = " & ") %>%
  str_c("& ", ., " \\\\")

out_table <- c(
  out_colnumbers,
  "\\midrule",
  out_x_fe,
  "\\midrule",
  out_sumstats)

# TODO
# if the following row has a midrule, remove the previous addlinespace

cat(out_table, file = "latex_testing/table1.tex", sep = "\n")
